class PolynomialSolver :
    
    def secant(self,li,n) :
        print("Enter lower bound of interval in which root lies") #interval containing the root
        l=float(input())
        print("Enter upper bound of interval in which root lies")
        u=float(input())
        def f(x) :          #calculating the value of function for a given x
            s=0
            z=0
            for t in li :
                s=s+pow(x,z)*t
                z=z+1
            return s ;
        i=0
        x1=l
        x2=u
        x=0
        while i<10000000 :
           i=i+1
           x=x2-(x2-x1)*f(x2)/(f(x2)-f(x1)) #Applying secant formula
           if(abs(f(x))<0.00001) :
               break ;
           x1=x2
           x2=x
        return x ;    
    def secantrf(self,li,n) :
        print("Enter lower bound of interval in which root lies")   #interval containing the root
        l=float(input())
        print("Enter upper bound of interval in which root lies")
        u=float(input())
        def f(x) :  #calculating the value of function for a given x
            s=0
            z=0
            for t in li :
                s=s+pow(x,z)*t
                z=z+1
            return s ;
        i=0
        x1=l
        x2=u
        x=0
        while i<10000000 :
           i=i+1
           x=x2-(x2-x1)*f(x2)/(f(x2)-f(x1))  #Applying secant regula falsi 
           if(abs(f(x))<0.00001) :
               break ;
           if(f(x2)*f(x1)<0) : 
               x2=x
           else : 
               x1=x
        return x ;
    def newton(self,li,n) :
        print("Enter approximate root") #approximate root from the user
        l=float(input())
        
        def f(x) :   #calculating the value of function for a given x 
            s=0
            z=0
            for t in li :
                s=s+pow(x,z)*t
                z=z+1
            return s ;
        def fd(x) :  #calculating the value of derivative offunction for a given x
            s=0
            z=0
            for t in li :
                s=s+z*pow(x,z-1)*t
                z=z+1
            return s ;
        i=0
        
        x2=l
        x=0
        while i<10000000 :              #Taking max iterations as 10000000
           i=i+1
           x=x2-f(x2)/fd(x2)            #Appyling newton raphson formula
           if(abs(f(x))<0.000001) :
               break ;
           x2=x

           
        return x ;
    def solve(self,n,L,method):
        if(method=='bisection'):
           return self.BisectionSearch(L,n)	
        if(method=='secant'):
           return self.secant(L,n)
        if(method=='secantRF'):
           return self.secantrf(L,n)	
        if(method=='newtonraphson'):
           return self.newton(L,n)	
        else:
           return NULL
#ps=PolynomialSolver()
#print(ps.solve(3,[1,3,3,1],'bisection'))
#print(ps.newton([1,3,3,1],3))
            
            
        
